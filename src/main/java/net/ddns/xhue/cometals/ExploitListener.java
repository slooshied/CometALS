package net.ddns.xhue.cometals;

import com.google.gson.Gson;
import net.ddns.xhue.cometals.Utils.ColorUtils;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ExploitListener implements Listener {

    private ALSConfig config;

    public ExploitListener(ALSConfig config) {
        this.config = config;
    }

    ColorUtils cu = new ColorUtils();

    @EventHandler
    public void onInteract(PlayerInteractEvent e) throws NoSuchMethodException, SecurityException {

        String prefix = cu.translateAll(config.getConfig().getString("prefix"));
        String deniedMessage = cu.translateAll(config.getConfig().getString("deniedMessage"));


        if (e.getItem() != null) {
            if (e.getItem().getType() == Material.ARMOR_STAND) {
                if (e.getPlayer().hasPermission(config.getConfig().getString("permission"))) {
                    return;
                }
                ItemStack i = e.getItem();
                Method m = getMethod(i, "asNMSCopy", org.bukkit.inventory.ItemStack.class);
                Object nmsCopy = invokeMethod(i, m, i);
                Method gettag = getMethod(nmsCopy, "getTag");
                Object x = invokeMethod(nmsCopy, gettag);
                if (x == null)
                    return;
                EntityData data = new Gson().fromJson(x.toString(), EntityData.class);
                if (data.getEntityTag() != null) {
                    e.setCancelled(true);
                    e.getPlayer().sendMessage(prefix + " " + deniedMessage);
                    return;
                }
            }
        }
    }

    public Method getMethod(Object o, String name, Class<?>... objects) {
        Method m;
        try {
            m = o.getClass().getMethod(name, objects);
            return m;
        } catch (NoSuchMethodException | SecurityException e1) {
            e1.printStackTrace();
        }
        return null;
    }

    public Object invokeMethod(Object o, Method m, Object... args) {
        try {
            return m.invoke(o, args);
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
            e.printStackTrace();
            return null;
        }
    }

}

